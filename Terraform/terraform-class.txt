Terraform Workflow
- init: used to initialize a working directory. This is the first command to be ran after writing a new terraform config as it downloads providers specifie in the configs. When we run this, we download plugins from the terraform registry.
- validate: validates the terraform config files in the the respcetive directory to ensure the syntax is valid and internally consistent
- plan: creates an execution plan. Terraform performs a refresh to determine what actions are necessary to achieve the desired state in the config files
- apply: apply changes in config to reach desired state. By defaut, this scans the current directory for config files and applies the changes appropriately
- destroy: used to destroy terraform managed infrastructure 

Code is stored in plain text files with .tf file extension
There is also a JSON-based variant with .tf.json file extension
These files containing terraform code can be called terraform configuration files ot terraform manifests

Terraform Language Basics

						Blocks
HCL - Hashicorp Language --> Terraform -->	Arguments
						Identifiers
						Comments


<BLOCK_TYPE> "<BLOCK LABEL>" "<BLOCK_LABEL>" {
	# Block body
	<IDENTIFIER> = <EXPRESSION> # Argument
}


Blocks: a block is a fundamental unit used to define and configure different aspects of your infrastructure.
There are 2 tyoes of blocks
Top level blocks and inside block

Single line comment identifiers: # or //
// only line
Multi-line comment identifiers: /* before first line, */ after last line.
/*
line1
line2
*/

Terraform uses a limited number of top-level block types, which are blocks that can appear outside of any other blockin a terraform configuration file. Most of terraform's features are implemented as top-level blocks.
Fundamental blocks - Terraform block, Providers block, Resource block
Variable blocks - Input variables block, Output values block, Local values block
Calling/Referencing blocks - Data source block, Modules block

Terraform block: can be called terraform block, terraform settings block, or terraform configuration block. Each terraform block contain a number of settings used configure some of Terraform's behavior like Terraform version, required providers,
		terraform backend.
		Within a terraform block, only constant values can be used; arguments may not refer to named objects such as resources, input variables, etc, and may not use any of the terraform built-in functions.

Provider block: known as the heart of terraform as terraform relies on providers to interact with remote systems. We declare providers for Terraform to install and use them. Provider config belong to Root Module.

Resource block: each resource block describes one or more infrastructure objects.

Resource Behavior
Terraform Resource -->   create resource: create resources that exist in the configuration but are not associated with a real infrastructure object in the state.
			 destroy resource: destroy resources that exist in the state but no longer exist in the configuration.
			 update in-place resources: update in-place resources whose arguments have changed.
			 destroy and recreate: destroy and recreate resources whose arguments have changed but which cannot be updated in-place due to remote API limitations.






###############
Common types of blocks - https://www.geeksforgeeks.org/different-types-of-blocks-in-terraform/
- Terraform Block: It is used to define global configuration and behavior for terraform execution
	Setting the required Terraform version.
	Configuring the backend for storing the state file.
	Defining experimental or optional features.
	Specifying variables used across multiple modules or configurations.
- Provider Block: is used to configure and define the provider for a specific cloud or infrastructure program. 
	It specifies details such as the provider name and version, authentication credentials, and other settings. 
	By correctly configuring the provider block, you ensure that Terraform knows which provider to use, the auth creds required, and how to authenticate with it.
- Data Block: is used to fetch data from external sources or existing resources. we can use a data block to fetch information about existing resources, such as a list of available AWS AMIs or the currently existing state of a Kubernetes cluster. 
	By utilizing data blocks, you can incorporate external data into your infrastructure configuration and make informed decisions based on that information.
- Resource Block: is used to declare and define the provider for a specific cloud or infrastructure program. Resources represent components such as virtual machines, networks, storage, databases, and other services.
	Each resource block specifies the resource type, name, and configuration parameters specific to that resource. 
	By using resource blocks effectively, we can create and manage the desired infrastructure resources in a consistent and repeatable manner.
- Module Block: allows us to organize and modularize your infrastructure code, promoting reusability, maintainability, and scalability.
- Variable Block: allows us to specify variables passed as arguments to our infrastructure. This enables us to easily customize and reuse our configuration for different scenarios without modifying the underlying code.
- Output Block: Defining values that are displayed as output after executing terraform apply or terraform output commands.
	Outputs can include information like IP addresses, URLs, or resource identifiers useful for interacting with the infrastructure.
- Locals Block: Local variables are temporary and can be defined within a block to compute and store intermediate values that are used within the same configuration file. 
	These variables are not exposed to other configurations or modules and are purely for internal use within the same configuration.
###############

Use the -auto-approve option when you don't want to e prompted to type in yes on either apply or destroy commands.

Make terraform to not prompt on destroy command
$ terraform destroy -auto-approve
$ rm -rf .terraform*





