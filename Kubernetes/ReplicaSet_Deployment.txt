Create job --> create pod --> create container --> run the app in the container

ReplicaSet

# kubectl get rs (list replica set)
# kubectl scale --replicas=2 rs/frontend (change replica set number - frontend is the name of our replica set here.)


Deployment
A deployment provides declarative updates for Pods and ReplicaSets. We describe a desired state in a Deployment, the Deployment Controller changes current state to that desired state at a controlled rate.
In Kubernetes, controllers are control loops that watch the state of your cluster, then make or request changes where needed. Each controller tries to move the current cluster state closer to the desired state just like a thermostat controlling the temperature based on the specific number we set it to.
You can define Deployments to create new ReplicaSets, or to remove existing Deployments and adopt all their resources with new Deployments.
 - Make sure to do everything in the definition yaml file instead of the command line in a production environment
Use cases for Deployments:
 - Create a Deployment to rollout ReplicaSets
 - Declare the new state of the Pods
 - Rollback to an earlier Deployment revision
 - Scale up the Deployment to facilitate more load
 - Pause rollout of a Deployment
 - Clean up older ReplicaSets
 - Check status of Deployments

# kubectl apply -f https://k8s.io/examples/controllers/nginx-deployment.yaml
# kubectl get deployments
# kubectl get pods 
# kubectl describe pod nginx-deployment-66f8758855-fb7j5 | grep -i image (check pod image)
# kubectl set image deployment.v1.apps/nginx-deployment nginx=nginx:1.16.1 (update deployment from nginx v1.14.2 to 1.16.1)
# kubectl set image deployment.v1.apps/nginx-deployment nginx=nginx:1.14.2 (rollback from 1.16.1 to 1.14.2)
# kubectl rollout history deploy nginx-deployment (check amount of rollouts)
# kubectl rollout status deployment/nginx-deployment
# 

From <https://kubernetes.io/docs/concepts/workloads/controllers/deployment/> 
